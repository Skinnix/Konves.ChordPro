//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\steve\Konves.ChordPro\src\Konves.ChordPro.Grammar\ChordProParser.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Konves.ChordPro {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IChordProParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class ChordProParserBaseListener : IChordProParserListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChordProParser.document"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDocument([NotNull] ChordProParser.DocumentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChordProParser.document"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDocument([NotNull] ChordProParser.DocumentContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="ChordProParser.songLine"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSongLine([NotNull] ChordProParser.SongLineContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChordProParser.songLine"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSongLine([NotNull] ChordProParser.SongLineContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="ChordProParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] ChordProParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChordProParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] ChordProParser.BlockContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="ChordProParser.word"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWord([NotNull] ChordProParser.WordContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChordProParser.word"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWord([NotNull] ChordProParser.WordContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="ChordProParser.syllable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSyllable([NotNull] ChordProParser.SyllableContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChordProParser.syllable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSyllable([NotNull] ChordProParser.SyllableContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="ChordProParser.chord"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterChord([NotNull] ChordProParser.ChordContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChordProParser.chord"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitChord([NotNull] ChordProParser.ChordContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="ChordProParser.directive"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDirective([NotNull] ChordProParser.DirectiveContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChordProParser.directive"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDirective([NotNull] ChordProParser.DirectiveContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace Konves.ChordPro
